/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 27361.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 1.0], [64.0, 1.0], [64.1, 1.0], [64.2, 1.0], [64.3, 1.0], [64.4, 1.0], [64.5, 1.0], [64.6, 1.0], [64.7, 1.0], [64.8, 1.0], [64.9, 1.0], [65.0, 1.0], [65.1, 1.0], [65.2, 1.0], [65.3, 1.0], [65.4, 1.0], [65.5, 1.0], [65.6, 1.0], [65.7, 1.0], [65.8, 1.0], [65.9, 1.0], [66.0, 1.0], [66.1, 1.0], [66.2, 1.0], [66.3, 1.0], [66.4, 1.0], [66.5, 1.0], [66.6, 1.0], [66.7, 1.0], [66.8, 1.0], [66.9, 1.0], [67.0, 1.0], [67.1, 1.0], [67.2, 1.0], [67.3, 1.0], [67.4, 1.0], [67.5, 1.0], [67.6, 1.0], [67.7, 1.0], [67.8, 1.0], [67.9, 1.0], [68.0, 1.0], [68.1, 1.0], [68.2, 1.0], [68.3, 1.0], [68.4, 1.0], [68.5, 1.0], [68.6, 1.0], [68.7, 1.0], [68.8, 1.0], [68.9, 1.0], [69.0, 1.0], [69.1, 1.0], [69.2, 1.0], [69.3, 1.0], [69.4, 1.0], [69.5, 1.0], [69.6, 1.0], [69.7, 1.0], [69.8, 1.0], [69.9, 1.0], [70.0, 1.0], [70.1, 1.0], [70.2, 1.0], [70.3, 1.0], [70.4, 1.0], [70.5, 1.0], [70.6, 1.0], [70.7, 1.0], [70.8, 1.0], [70.9, 1.0], [71.0, 1.0], [71.1, 1.0], [71.2, 1.0], [71.3, 1.0], [71.4, 1.0], [71.5, 1.0], [71.6, 1.0], [71.7, 1.0], [71.8, 1.0], [71.9, 1.0], [72.0, 1.0], [72.1, 1.0], [72.2, 1.0], [72.3, 1.0], [72.4, 1.0], [72.5, 1.0], [72.6, 1.0], [72.7, 1.0], [72.8, 1.0], [72.9, 1.0], [73.0, 2.0], [73.1, 2.0], [73.2, 2.0], [73.3, 2.0], [73.4, 2.0], [73.5, 2.0], [73.6, 2.0], [73.7, 2.0], [73.8, 2.0], [73.9, 2.0], [74.0, 2.0], [74.1, 2.0], [74.2, 2.0], [74.3, 2.0], [74.4, 2.0], [74.5, 2.0], [74.6, 2.0], [74.7, 2.0], [74.8, 2.0], [74.9, 2.0], [75.0, 2.0], [75.1, 2.0], [75.2, 2.0], [75.3, 2.0], [75.4, 2.0], [75.5, 2.0], [75.6, 2.0], [75.7, 2.0], [75.8, 2.0], [75.9, 2.0], [76.0, 2.0], [76.1, 2.0], [76.2, 2.0], [76.3, 2.0], [76.4, 2.0], [76.5, 2.0], [76.6, 2.0], [76.7, 2.0], [76.8, 2.0], [76.9, 2.0], [77.0, 2.0], [77.1, 2.0], [77.2, 2.0], [77.3, 2.0], [77.4, 2.0], [77.5, 2.0], [77.6, 2.0], [77.7, 2.0], [77.8, 2.0], [77.9, 2.0], [78.0, 2.0], [78.1, 2.0], [78.2, 2.0], [78.3, 2.0], [78.4, 2.0], [78.5, 2.0], [78.6, 2.0], [78.7, 2.0], [78.8, 2.0], [78.9, 2.0], [79.0, 2.0], [79.1, 2.0], [79.2, 2.0], [79.3, 2.0], [79.4, 2.0], [79.5, 2.0], [79.6, 2.0], [79.7, 2.0], [79.8, 2.0], [79.9, 2.0], [80.0, 2.0], [80.1, 2.0], [80.2, 2.0], [80.3, 2.0], [80.4, 2.0], [80.5, 2.0], [80.6, 2.0], [80.7, 2.0], [80.8, 2.0], [80.9, 2.0], [81.0, 2.0], [81.1, 2.0], [81.2, 2.0], [81.3, 2.0], [81.4, 2.0], [81.5, 2.0], [81.6, 2.0], [81.7, 2.0], [81.8, 2.0], [81.9, 2.0], [82.0, 2.0], [82.1, 2.0], [82.2, 2.0], [82.3, 2.0], [82.4, 2.0], [82.5, 2.0], [82.6, 2.0], [82.7, 2.0], [82.8, 2.0], [82.9, 2.0], [83.0, 2.0], [83.1, 2.0], [83.2, 2.0], [83.3, 2.0], [83.4, 2.0], [83.5, 2.0], [83.6, 2.0], [83.7, 2.0], [83.8, 2.0], [83.9, 2.0], [84.0, 2.0], [84.1, 2.0], [84.2, 2.0], [84.3, 2.0], [84.4, 2.0], [84.5, 2.0], [84.6, 2.0], [84.7, 2.0], [84.8, 2.0], [84.9, 2.0], [85.0, 2.0], [85.1, 2.0], [85.2, 2.0], [85.3, 2.0], [85.4, 2.0], [85.5, 2.0], [85.6, 2.0], [85.7, 2.0], [85.8, 2.0], [85.9, 2.0], [86.0, 2.0], [86.1, 2.0], [86.2, 2.0], [86.3, 2.0], [86.4, 2.0], [86.5, 2.0], [86.6, 2.0], [86.7, 2.0], [86.8, 2.0], [86.9, 2.0], [87.0, 2.0], [87.1, 2.0], [87.2, 2.0], [87.3, 2.0], [87.4, 2.0], [87.5, 2.0], [87.6, 2.0], [87.7, 2.0], [87.8, 2.0], [87.9, 2.0], [88.0, 2.0], [88.1, 2.0], [88.2, 2.0], [88.3, 2.0], [88.4, 2.0], [88.5, 2.0], [88.6, 2.0], [88.7, 2.0], [88.8, 2.0], [88.9, 2.0], [89.0, 2.0], [89.1, 2.0], [89.2, 2.0], [89.3, 2.0], [89.4, 2.0], [89.5, 2.0], [89.6, 2.0], [89.7, 2.0], [89.8, 2.0], [89.9, 2.0], [90.0, 2.0], [90.1, 2.0], [90.2, 2.0], [90.3, 2.0], [90.4, 2.0], [90.5, 2.0], [90.6, 3.0], [90.7, 3.0], [90.8, 3.0], [90.9, 3.0], [91.0, 3.0], [91.1, 3.0], [91.2, 3.0], [91.3, 3.0], [91.4, 3.0], [91.5, 3.0], [91.6, 3.0], [91.7, 3.0], [91.8, 3.0], [91.9, 3.0], [92.0, 3.0], [92.1, 3.0], [92.2, 3.0], [92.3, 3.0], [92.4, 3.0], [92.5, 3.0], [92.6, 3.0], [92.7, 3.0], [92.8, 3.0], [92.9, 3.0], [93.0, 3.0], [93.1, 3.0], [93.2, 3.0], [93.3, 3.0], [93.4, 3.0], [93.5, 3.0], [93.6, 3.0], [93.7, 3.0], [93.8, 3.0], [93.9, 3.0], [94.0, 3.0], [94.1, 4.0], [94.2, 4.0], [94.3, 4.0], [94.4, 4.0], [94.5, 4.0], [94.6, 4.0], [94.7, 4.0], [94.8, 4.0], [94.9, 4.0], [95.0, 4.0], [95.1, 4.0], [95.2, 4.0], [95.3, 4.0], [95.4, 4.0], [95.5, 4.0], [95.6, 4.0], [95.7, 5.0], [95.8, 5.0], [95.9, 5.0], [96.0, 5.0], [96.1, 5.0], [96.2, 5.0], [96.3, 5.0], [96.4, 5.0], [96.5, 5.0], [96.6, 6.0], [96.7, 6.0], [96.8, 6.0], [96.9, 6.0], [97.0, 6.0], [97.1, 6.0], [97.2, 7.0], [97.3, 7.0], [97.4, 7.0], [97.5, 7.0], [97.6, 8.0], [97.7, 8.0], [97.8, 8.0], [97.9, 9.0], [98.0, 9.0], [98.1, 9.0], [98.2, 10.0], [98.3, 10.0], [98.4, 11.0], [98.5, 12.0], [98.6, 12.0], [98.7, 13.0], [98.8, 14.0], [98.9, 16.0], [99.0, 18.0], [99.1, 21.0], [99.2, 26.0], [99.3, 33.0], [99.4, 44.0], [99.5, 60.0], [99.6, 86.0], [99.7, 131.0], [99.8, 185.0], [99.9, 415.0], [100.0, 27361.0]], "isOverall": false, "label": "Java Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6428423.0, "series": [{"data": [[0.0, 6428423.0], [100.0, 13340.0], [200.0, 3015.0], [300.0, 531.0], [400.0, 535.0], [500.0, 537.0], [600.0, 348.0], [700.0, 317.0], [800.0, 189.0], [900.0, 222.0], [1000.0, 127.0], [1100.0, 144.0], [1200.0, 137.0], [1300.0, 120.0], [1400.0, 179.0], [1500.0, 46.0], [1600.0, 43.0], [1700.0, 21.0], [1800.0, 1.0], [1900.0, 20.0], [2000.0, 91.0], [2300.0, 84.0], [2400.0, 150.0], [2500.0, 56.0], [2600.0, 87.0], [2800.0, 29.0], [2700.0, 4.0], [2900.0, 37.0], [3000.0, 59.0], [3100.0, 1.0], [3300.0, 16.0], [3200.0, 10.0], [3400.0, 60.0], [3500.0, 51.0], [3700.0, 51.0], [3600.0, 45.0], [3800.0, 11.0], [3900.0, 36.0], [4000.0, 1.0], [4100.0, 30.0], [4200.0, 50.0], [4600.0, 59.0], [4500.0, 44.0], [4400.0, 33.0], [4800.0, 68.0], [4700.0, 25.0], [5000.0, 41.0], [4900.0, 3.0], [5100.0, 29.0], [5200.0, 41.0], [5300.0, 106.0], [5500.0, 15.0], [5400.0, 16.0], [5800.0, 40.0], [5700.0, 22.0], [5900.0, 23.0], [6100.0, 22.0], [6000.0, 10.0], [6300.0, 29.0], [6200.0, 6.0], [6600.0, 4.0], [6800.0, 7.0], [7000.0, 9.0], [7400.0, 5.0], [7300.0, 12.0], [7200.0, 5.0], [7500.0, 2.0], [7700.0, 6.0], [7800.0, 2.0], [7900.0, 3.0], [8000.0, 6.0], [8100.0, 6.0], [8400.0, 14.0], [8300.0, 3.0], [8700.0, 9.0], [8500.0, 7.0], [9000.0, 6.0], [9100.0, 6.0], [8800.0, 6.0], [9700.0, 2.0], [9800.0, 13.0], [10000.0, 21.0], [10100.0, 3.0], [13500.0, 50.0], [14300.0, 48.0], [14100.0, 50.0], [14800.0, 41.0], [14500.0, 46.0], [14400.0, 3.0], [15300.0, 74.0], [15200.0, 8.0], [14900.0, 40.0], [15700.0, 69.0], [15400.0, 14.0], [15500.0, 1.0], [16300.0, 28.0], [16000.0, 50.0], [17400.0, 14.0], [17000.0, 10.0], [16600.0, 21.0], [16700.0, 2.0], [16400.0, 10.0], [16500.0, 27.0], [18300.0, 16.0], [18400.0, 70.0], [18200.0, 9.0], [17900.0, 38.0], [18000.0, 7.0], [17800.0, 9.0], [17700.0, 5.0], [18100.0, 68.0], [17600.0, 4.0], [18500.0, 73.0], [19000.0, 21.0], [19100.0, 78.0], [19400.0, 37.0], [18800.0, 32.0], [18700.0, 32.0], [18600.0, 38.0], [20000.0, 9.0], [19800.0, 21.0], [19700.0, 7.0], [20600.0, 11.0], [21100.0, 62.0], [21400.0, 27.0], [21500.0, 1.0], [20900.0, 9.0], [21300.0, 20.0], [21000.0, 2.0], [21200.0, 2.0], [21700.0, 62.0], [22400.0, 23.0], [22500.0, 34.0], [21800.0, 24.0], [21900.0, 9.0], [22200.0, 28.0], [22300.0, 7.0], [22100.0, 51.0], [22000.0, 33.0], [21600.0, 12.0], [22900.0, 8.0], [22800.0, 59.0], [23200.0, 7.0], [23100.0, 15.0], [23500.0, 2.0], [22600.0, 14.0], [23300.0, 28.0], [23600.0, 11.0], [23700.0, 2.0], [24800.0, 7.0], [27300.0, 50.0]], "isOverall": false, "label": "Java Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2317.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6433672.0, "series": [{"data": [[0.0, 6433672.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2317.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3679.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12175.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.69880328E12, "maxY": 50.0, "series": [{"data": [[1.6988085E12, 50.0], [1.69881132E12, 50.0], [1.69880406E12, 50.0], [1.69880628E12, 50.0], [1.169880336E13, 16.0], [1.69880346E12, 49.25180675397514], [1.69880568E12, 50.0], [1.6988073E12, 50.0], [1.69880646E12, 50.0], [1.69880868E12, 48.35710106160661], [1.69881114E12, 50.0], [1.69880544E12, 49.977317554240585], [1.69880706E12, 50.0], [1.6988091E12, 50.0], [1.69881072E12, 50.0], [1.69880424E12, 50.0], [1.69880586E12, 50.0], [1.69880748E12, 50.0], [1.69880364E12, 50.0], [1.69881174E12, 50.0], [1.69880724E12, 50.0], [1.698804E12, 50.0], [1.69880562E12, 49.75743521687502], [1.69881066E12, 50.0], [1.6988034E12, 50.0], [1.69881186E12, 49.9493889552513], [1.69881126E12, 50.0], [1.69880382E12, 50.0], [1.69880604E12, 50.0], [1.69880826E12, 49.80422459773715], [1.69880418E12, 50.0], [1.69880742E12, 50.0], [1.6988064E12, 50.0], [1.6988115E12, 50.0], [1.69880358E12, 50.0], [1.6988058E12, 50.0], [1.69880844E12, 50.0], [1.69881168E12, 50.0], [1.69881108E12, 50.0], [1.69880622E12, 50.0], [1.69880904E12, 49.969398907103816], [1.6988082E12, 49.796505516150134], [1.69881162E12, 50.0], [1.69880598E12, 50.0], [1.69880436E12, 49.90390360485958], [1.69881102E12, 50.0], [1.698807E12, 50.0], [1.69880862E12, 50.0], [1.6988112E12, 50.0], [1.69880376E12, 50.0], [1.6988076E12, 50.0], [1.69881144E12, 50.0], [1.69880352E12, 50.0], [1.69880838E12, 50.0], [1.69880736E12, 50.0], [1.69880718E12, 50.0], [1.69880394E12, 50.0], [1.69880616E12, 50.0], [1.69880334E12, 49.983484106565], [1.69880556E12, 50.0], [1.69881096E12, 49.67540403263059], [1.69880694E12, 49.659760164620664], [1.6988037E12, 50.0], [1.69880592E12, 50.0], [1.69880754E12, 50.0], [1.69880634E12, 50.0], [1.69881156E12, 50.0], [1.69880412E12, 50.0], [1.69880574E12, 50.0], [1.69880856E12, 50.0], [1.6988061E12, 50.0], [1.69880388E12, 50.0], [1.6988055E12, 50.0], [1.69880832E12, 50.0], [1.6988118E12, 50.0], [1.69880652E12, 49.91424368173428], [1.69880328E12, 49.997518610421736], [1.69881138E12, 50.0], [1.69880814E12, 49.972500000000046], [1.6988043E12, 50.0], [1.69880712E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.169880336E13, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3365.666666666667, "series": [{"data": [[2.0, 1.3333333333333333], [3.0, 2016.6], [4.0, 3361.0], [5.0, 1440.7142857142853], [6.0, 1.1818181818181819], [7.0, 1.0], [8.0, 1440.142857142857], [9.0, 1.125], [10.0, 3365.666666666667], [11.0, 1.0], [12.0, 2519.5], [13.0, 2020.4], [14.0, 96.42857142857143], [15.0, 82.15384615384617], [16.0, 325.15966386554607], [17.0, 7.3829787234042525], [18.0, 292.9469026548673], [19.0, 160.39436619718305], [20.0, 68.63313609467454], [21.0, 73.68518518518528], [22.0, 114.80208333333333], [23.0, 96.42794759825318], [24.0, 46.2716535433071], [25.0, 6.823529411764707], [26.0, 7.517509727626456], [27.0, 6.776978417266187], [28.0, 4.679715302491102], [29.0, 4.371323529411764], [30.0, 3.121212121212122], [31.0, 2.8634812286689413], [32.0, 2.4698795180722874], [33.0, 3.5085324232081914], [34.0, 3.8697916666666674], [35.0, 2.8944723618090458], [36.0, 3.855737704918035], [37.0, 4.1111111111111125], [38.0, 2.321428571428572], [39.0, 2.732558139534884], [40.0, 4.0431034482758585], [41.0, 51.93220338983048], [42.0, 48.510489510489506], [43.0, 24.799352750809074], [44.0, 3.4155405405405386], [45.0, 277.7583892617449], [46.0, 23.272108843537417], [47.0, 71.03880597014927], [49.0, 124.29718875502003], [48.0, 103.2452830188678], [50.0, 8.858329278635697], [1.0, 3361.333333333333]], "isOverall": false, "label": "Java Request", "isController": false}, {"data": [[49.978936406232414, 8.929579036563707]], "isOverall": false, "label": "Java Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.69880328E12, "maxY": 4.9E-324, "series": [{"data": [[1.6988085E12, 0.0], [1.69881132E12, 0.0], [1.69880406E12, 0.0], [1.69880628E12, 0.0], [1.169880336E13, 0.0], [1.69880346E12, 0.0], [1.69880568E12, 0.0], [1.6988073E12, 0.0], [1.69880646E12, 0.0], [1.69880868E12, 0.0], [1.69881114E12, 0.0], [1.69880544E12, 0.0], [1.69880706E12, 0.0], [1.6988091E12, 0.0], [1.69881072E12, 0.0], [1.69880424E12, 0.0], [1.69880586E12, 0.0], [1.69880748E12, 0.0], [1.69880364E12, 0.0], [1.69881174E12, 0.0], [1.69880724E12, 0.0], [1.698804E12, 0.0], [1.69880562E12, 0.0], [1.69881066E12, 0.0], [1.6988034E12, 0.0], [1.69881186E12, 0.0], [1.69881126E12, 0.0], [1.69880382E12, 0.0], [1.69880604E12, 0.0], [1.69880826E12, 0.0], [1.69880418E12, 0.0], [1.69880742E12, 0.0], [1.6988064E12, 0.0], [1.6988115E12, 0.0], [1.69880358E12, 0.0], [1.6988058E12, 0.0], [1.69880844E12, 0.0], [1.69881168E12, 0.0], [1.69881108E12, 0.0], [1.69880622E12, 0.0], [1.69880904E12, 0.0], [1.6988082E12, 0.0], [1.69881162E12, 0.0], [1.69880598E12, 0.0], [1.69880436E12, 0.0], [1.69881102E12, 0.0], [1.698807E12, 0.0], [1.69880862E12, 0.0], [1.6988112E12, 0.0], [1.69880376E12, 0.0], [1.6988076E12, 0.0], [1.69881144E12, 0.0], [1.69880352E12, 0.0], [1.69880838E12, 0.0], [1.69880736E12, 0.0], [1.69880718E12, 0.0], [1.69880394E12, 0.0], [1.69880616E12, 0.0], [1.69880334E12, 0.0], [1.69880556E12, 0.0], [1.69881096E12, 0.0], [1.69880694E12, 0.0], [1.6988037E12, 0.0], [1.69880592E12, 0.0], [1.69880754E12, 0.0], [1.69880634E12, 0.0], [1.69881156E12, 0.0], [1.69880412E12, 0.0], [1.69880574E12, 0.0], [1.69880856E12, 0.0], [1.6988061E12, 0.0], [1.69880388E12, 0.0], [1.6988055E12, 0.0], [1.69880832E12, 0.0], [1.6988118E12, 0.0], [1.69880652E12, 0.0], [1.69880328E12, 0.0], [1.69881138E12, 0.0], [1.69880814E12, 0.0], [1.6988043E12, 0.0], [1.69880712E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6988085E12, 0.0], [1.69881132E12, 0.0], [1.69880406E12, 0.0], [1.69880628E12, 0.0], [1.169880336E13, 0.0], [1.69880346E12, 0.0], [1.69880568E12, 0.0], [1.6988073E12, 0.0], [1.69880646E12, 0.0], [1.69880868E12, 0.0], [1.69881114E12, 0.0], [1.69880544E12, 0.0], [1.69880706E12, 0.0], [1.6988091E12, 0.0], [1.69881072E12, 0.0], [1.69880424E12, 0.0], [1.69880586E12, 0.0], [1.69880748E12, 0.0], [1.69880364E12, 0.0], [1.69881174E12, 0.0], [1.69880724E12, 0.0], [1.698804E12, 0.0], [1.69880562E12, 0.0], [1.69881066E12, 0.0], [1.6988034E12, 0.0], [1.69881186E12, 0.0], [1.69881126E12, 0.0], [1.69880382E12, 0.0], [1.69880604E12, 0.0], [1.69880826E12, 0.0], [1.69880418E12, 0.0], [1.69880742E12, 0.0], [1.6988064E12, 0.0], [1.6988115E12, 0.0], [1.69880358E12, 0.0], [1.6988058E12, 0.0], [1.69880844E12, 0.0], [1.69881168E12, 0.0], [1.69881108E12, 0.0], [1.69880622E12, 0.0], [1.69880904E12, 0.0], [1.6988082E12, 0.0], [1.69881162E12, 0.0], [1.69880598E12, 0.0], [1.69880436E12, 0.0], [1.69881102E12, 0.0], [1.698807E12, 0.0], [1.69880862E12, 0.0], [1.6988112E12, 0.0], [1.69880376E12, 0.0], [1.6988076E12, 0.0], [1.69881144E12, 0.0], [1.69880352E12, 0.0], [1.69880838E12, 0.0], [1.69880736E12, 0.0], [1.69880718E12, 0.0], [1.69880394E12, 0.0], [1.69880616E12, 0.0], [1.69880334E12, 0.0], [1.69880556E12, 0.0], [1.69881096E12, 0.0], [1.69880694E12, 0.0], [1.6988037E12, 0.0], [1.69880592E12, 0.0], [1.69880754E12, 0.0], [1.69880634E12, 0.0], [1.69881156E12, 0.0], [1.69880412E12, 0.0], [1.69880574E12, 0.0], [1.69880856E12, 0.0], [1.6988061E12, 0.0], [1.69880388E12, 0.0], [1.6988055E12, 0.0], [1.69880832E12, 0.0], [1.6988118E12, 0.0], [1.69880652E12, 0.0], [1.69880328E12, 0.0], [1.69881138E12, 0.0], [1.69880814E12, 0.0], [1.6988043E12, 0.0], [1.69880712E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.169880336E13, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0775487075215497, "minX": 1.69880328E12, "maxY": 272.0, "series": [{"data": [[1.6988085E12, 7.031929186754201], [1.69881132E12, 1.163044384073066], [1.69880406E12, 120.37438078558948], [1.69880628E12, 1.1200686678111351], [1.169880336E13, 272.0], [1.69880346E12, 47.658797249354066], [1.69880568E12, 1.457021191490056], [1.6988073E12, 1.7093333333333192], [1.69880646E12, 2.9477518804600735], [1.69880868E12, 2.6671403494106882], [1.69881114E12, 1.1078351305855136], [1.69880544E12, 60.40910585141357], [1.69880706E12, 1.1018583333333398], [1.6988091E12, 15.358372290692827], [1.69881072E12, 17.37528760233275], [1.69880424E12, 121.3700610183057], [1.69880586E12, 1.1531576620538264], [1.69880748E12, 1.5750250000000159], [1.69880364E12, 116.86609643857452], [1.69881174E12, 1.1340416666666728], [1.69880724E12, 1.9470334565049219], [1.698804E12, 123.35180831374174], [1.69880562E12, 1.7353076761891426], [1.69881066E12, 58.292129246064626], [1.6988034E12, 96.64626149540123], [1.69881186E12, 1.119746393457698], [1.69881126E12, 1.1388166666666857], [1.69880382E12, 124.05309233449573], [1.69880604E12, 1.2864353470211989], [1.69880826E12, 4.30699189894887], [1.69880418E12, 120.448834650396], [1.69880742E12, 1.478058333333324], [1.6988064E12, 1.1403893268445526], [1.6988115E12, 1.0919454977290872], [1.69880358E12, 119.59671852333557], [1.6988058E12, 1.1008999999999902], [1.69880844E12, 4.523874177616561], [1.69881168E12, 1.4510064422329696], [1.69881108E12, 1.09593253389555], [1.69880622E12, 1.1050657911184012], [1.69880904E12, 84.0896174863388], [1.6988082E12, 8.180256940832757], [1.69881162E12, 1.1405989461748918], [1.69880598E12, 1.1310416666666891], [1.69880436E12, 156.67655845449127], [1.69881102E12, 1.1097184953082404], [1.698807E12, 1.0973749999999913], [1.69880862E12, 5.600248419569546], [1.6988112E12, 1.1214416666666822], [1.69880376E12, 147.437930346273], [1.6988076E12, 1.105889823781568], [1.69881144E12, 1.5279412009799935], [1.69880352E12, 117.90724434660724], [1.69880838E12, 3.8495384753928663], [1.69880736E12, 1.238199999999995], [1.69880718E12, 1.2478824531800843], [1.69880394E12, 115.3895475441568], [1.69880616E12, 1.2546442151005], [1.69880334E12, 199.76653664204494], [1.69880556E12, 1.4284284033739565], [1.69881096E12, 1.5889795290133828], [1.69880694E12, 1.4207526195037592], [1.6988037E12, 117.90358374568923], [1.69880592E12, 1.1267271121185145], [1.69880754E12, 1.171033333333338], [1.69880634E12, 1.1122000000000012], [1.69881156E12, 1.0775487075215497], [1.69880412E12, 121.24119823964726], [1.69880574E12, 1.1446536163403975], [1.69880856E12, 5.016185164218276], [1.6988061E12, 2.100768346139108], [1.69880388E12, 90.43738849876584], [1.6988055E12, 10.851521602747946], [1.69880832E12, 4.244344136499066], [1.6988118E12, 1.0886666666666593], [1.69880652E12, 1.1108350797329734], [1.69880328E12, 25.431315136476172], [1.69881138E12, 1.1763645919363408], [1.69880814E12, 65.49187500000001], [1.6988043E12, 152.9206728376626], [1.69880712E12, 1.0926999999999976]], "isOverall": false, "label": "Java Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.169880336E13, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69880328E12, "maxY": 4.9E-324, "series": [{"data": [[1.6988085E12, 0.0], [1.69881132E12, 0.0], [1.69880406E12, 0.0], [1.69880628E12, 0.0], [1.169880336E13, 0.0], [1.69880346E12, 0.0], [1.69880568E12, 0.0], [1.6988073E12, 0.0], [1.69880646E12, 0.0], [1.69880868E12, 0.0], [1.69881114E12, 0.0], [1.69880544E12, 0.0], [1.69880706E12, 0.0], [1.6988091E12, 0.0], [1.69881072E12, 0.0], [1.69880424E12, 0.0], [1.69880586E12, 0.0], [1.69880748E12, 0.0], [1.69880364E12, 0.0], [1.69881174E12, 0.0], [1.69880724E12, 0.0], [1.698804E12, 0.0], [1.69880562E12, 0.0], [1.69881066E12, 0.0], [1.6988034E12, 0.0], [1.69881186E12, 0.0], [1.69881126E12, 0.0], [1.69880382E12, 0.0], [1.69880604E12, 0.0], [1.69880826E12, 0.0], [1.69880418E12, 0.0], [1.69880742E12, 0.0], [1.6988064E12, 0.0], [1.6988115E12, 0.0], [1.69880358E12, 0.0], [1.6988058E12, 0.0], [1.69880844E12, 0.0], [1.69881168E12, 0.0], [1.69881108E12, 0.0], [1.69880622E12, 0.0], [1.69880904E12, 0.0], [1.6988082E12, 0.0], [1.69881162E12, 0.0], [1.69880598E12, 0.0], [1.69880436E12, 0.0], [1.69881102E12, 0.0], [1.698807E12, 0.0], [1.69880862E12, 0.0], [1.6988112E12, 0.0], [1.69880376E12, 0.0], [1.6988076E12, 0.0], [1.69881144E12, 0.0], [1.69880352E12, 0.0], [1.69880838E12, 0.0], [1.69880736E12, 0.0], [1.69880718E12, 0.0], [1.69880394E12, 0.0], [1.69880616E12, 0.0], [1.69880334E12, 0.0], [1.69880556E12, 0.0], [1.69881096E12, 0.0], [1.69880694E12, 0.0], [1.6988037E12, 0.0], [1.69880592E12, 0.0], [1.69880754E12, 0.0], [1.69880634E12, 0.0], [1.69881156E12, 0.0], [1.69880412E12, 0.0], [1.69880574E12, 0.0], [1.69880856E12, 0.0], [1.6988061E12, 0.0], [1.69880388E12, 0.0], [1.6988055E12, 0.0], [1.69880832E12, 0.0], [1.6988118E12, 0.0], [1.69880652E12, 0.0], [1.69880328E12, 0.0], [1.69881138E12, 0.0], [1.69880814E12, 0.0], [1.6988043E12, 0.0], [1.69880712E12, 0.0]], "isOverall": false, "label": "Java Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.169880336E13, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69880328E12, "maxY": 4.9E-324, "series": [{"data": [[1.6988085E12, 0.0], [1.69881132E12, 0.0], [1.69880406E12, 0.0], [1.69880628E12, 0.0], [1.169880336E13, 0.0], [1.69880346E12, 0.0], [1.69880568E12, 0.0], [1.6988073E12, 0.0], [1.69880646E12, 0.0], [1.69880868E12, 0.0], [1.69881114E12, 0.0], [1.69880544E12, 0.0], [1.69880706E12, 0.0], [1.6988091E12, 0.0], [1.69881072E12, 0.0], [1.69880424E12, 0.0], [1.69880586E12, 0.0], [1.69880748E12, 0.0], [1.69880364E12, 0.0], [1.69881174E12, 0.0], [1.69880724E12, 0.0], [1.698804E12, 0.0], [1.69880562E12, 0.0], [1.69881066E12, 0.0], [1.6988034E12, 0.0], [1.69881186E12, 0.0], [1.69881126E12, 0.0], [1.69880382E12, 0.0], [1.69880604E12, 0.0], [1.69880826E12, 0.0], [1.69880418E12, 0.0], [1.69880742E12, 0.0], [1.6988064E12, 0.0], [1.6988115E12, 0.0], [1.69880358E12, 0.0], [1.6988058E12, 0.0], [1.69880844E12, 0.0], [1.69881168E12, 0.0], [1.69881108E12, 0.0], [1.69880622E12, 0.0], [1.69880904E12, 0.0], [1.6988082E12, 0.0], [1.69881162E12, 0.0], [1.69880598E12, 0.0], [1.69880436E12, 0.0], [1.69881102E12, 0.0], [1.698807E12, 0.0], [1.69880862E12, 0.0], [1.6988112E12, 0.0], [1.69880376E12, 0.0], [1.6988076E12, 0.0], [1.69881144E12, 0.0], [1.69880352E12, 0.0], [1.69880838E12, 0.0], [1.69880736E12, 0.0], [1.69880718E12, 0.0], [1.69880394E12, 0.0], [1.69880616E12, 0.0], [1.69880334E12, 0.0], [1.69880556E12, 0.0], [1.69881096E12, 0.0], [1.69880694E12, 0.0], [1.6988037E12, 0.0], [1.69880592E12, 0.0], [1.69880754E12, 0.0], [1.69880634E12, 0.0], [1.69881156E12, 0.0], [1.69880412E12, 0.0], [1.69880574E12, 0.0], [1.69880856E12, 0.0], [1.6988061E12, 0.0], [1.69880388E12, 0.0], [1.6988055E12, 0.0], [1.69880832E12, 0.0], [1.6988118E12, 0.0], [1.69880652E12, 0.0], [1.69880328E12, 0.0], [1.69881138E12, 0.0], [1.69880814E12, 0.0], [1.6988043E12, 0.0], [1.69880712E12, 0.0]], "isOverall": false, "label": "Java Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.169880336E13, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69880328E12, "maxY": 27361.0, "series": [{"data": [[1.6988085E12, 3030.0], [1.69881132E12, 37.0], [1.69880406E12, 23773.0], [1.69880628E12, 29.0], [1.169880336E13, 272.0], [1.69880346E12, 20654.0], [1.69880568E12, 37.0], [1.6988073E12, 32.0], [1.69880646E12, 1031.0], [1.69881114E12, 32.0], [1.69880544E12, 893.0], [1.69880706E12, 29.0], [1.6988091E12, 1172.0], [1.69881072E12, 3740.0], [1.69880424E12, 21472.0], [1.69880586E12, 109.0], [1.69880748E12, 29.0], [1.69880364E12, 21804.0], [1.69881174E12, 30.0], [1.69880724E12, 104.0], [1.698804E12, 24862.0], [1.69880562E12, 301.0], [1.69881066E12, 2784.0], [1.6988034E12, 23648.0], [1.69881186E12, 31.0], [1.69881126E12, 34.0], [1.69880382E12, 23378.0], [1.69880604E12, 76.0], [1.69880826E12, 275.0], [1.69880418E12, 21201.0], [1.69880742E12, 27.0], [1.6988064E12, 31.0], [1.6988115E12, 37.0], [1.69880358E12, 23539.0], [1.6988058E12, 30.0], [1.69880844E12, 364.0], [1.69881168E12, 130.0], [1.69881108E12, 31.0], [1.69880622E12, 24.0], [1.69880904E12, 1270.0], [1.6988082E12, 1609.0], [1.69881162E12, 66.0], [1.69880598E12, 36.0], [1.69880436E12, 13599.0], [1.69881102E12, 29.0], [1.698807E12, 35.0], [1.69880862E12, 665.0], [1.6988112E12, 35.0], [1.69880376E12, 23325.0], [1.6988076E12, 26.0], [1.69881144E12, 47.0], [1.69880352E12, 23226.0], [1.69880838E12, 243.0], [1.69880736E12, 31.0], [1.69880718E12, 96.0], [1.69880394E12, 23693.0], [1.69880616E12, 177.0], [1.69880334E12, 27361.0], [1.69880556E12, 102.0], [1.69881096E12, 230.0], [1.69880694E12, 336.0], [1.6988037E12, 23337.0], [1.69880592E12, 28.0], [1.69880754E12, 29.0], [1.69880634E12, 36.0], [1.69881156E12, 28.0], [1.69880412E12, 21741.0], [1.69880574E12, 37.0], [1.69880856E12, 588.0], [1.6988061E12, 34.0], [1.69880388E12, 23674.0], [1.6988055E12, 2495.0], [1.69880832E12, 220.0], [1.6988118E12, 26.0], [1.69880652E12, 34.0], [1.69880328E12, 914.0], [1.69881138E12, 95.0], [1.69880814E12, 960.0], [1.6988043E12, 19880.0], [1.69880712E12, 33.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6988085E12, 7.0], [1.69881132E12, 2.0], [1.69880406E12, 2.0], [1.69880628E12, 2.0], [1.169880336E13, 272.0], [1.69880346E12, 2.0], [1.69880568E12, 2.0], [1.6988073E12, 3.0], [1.69880646E12, 2.0], [1.69881114E12, 2.0], [1.69880544E12, 125.0], [1.69880706E12, 2.0], [1.6988091E12, 17.0], [1.69881072E12, 11.0], [1.69880424E12, 2.0], [1.69880586E12, 2.0], [1.69880748E12, 3.0], [1.69880364E12, 2.0], [1.69881174E12, 2.0], [1.69880724E12, 2.0], [1.698804E12, 2.0], [1.69880562E12, 4.0], [1.69881066E12, 112.0], [1.6988034E12, 2.0], [1.69881186E12, 2.0], [1.69881126E12, 2.0], [1.69880382E12, 2.0], [1.69880604E12, 2.0], [1.69880826E12, 3.0], [1.69880418E12, 2.0], [1.69880742E12, 3.0], [1.6988064E12, 2.0], [1.6988115E12, 2.0], [1.69880358E12, 3.0], [1.6988058E12, 2.0], [1.69880844E12, 9.0], [1.69881168E12, 2.0], [1.69881108E12, 2.0], [1.69880622E12, 2.0], [1.69880904E12, 230.0], [1.6988082E12, 6.0], [1.69881162E12, 2.0], [1.69880598E12, 2.0], [1.69880436E12, 2.0], [1.69881102E12, 2.0], [1.698807E12, 2.0], [1.69880862E12, 3.0], [1.6988112E12, 2.0], [1.69880376E12, 2.0], [1.6988076E12, 2.0], [1.69881144E12, 2.0], [1.69880352E12, 2.0], [1.69880838E12, 5.0], [1.69880736E12, 2.0], [1.69880718E12, 2.0], [1.69880394E12, 2.0], [1.69880616E12, 2.0], [1.69880334E12, 7.0], [1.69880556E12, 2.0], [1.69881096E12, 2.0], [1.69880694E12, 2.0], [1.6988037E12, 2.0], [1.69880592E12, 2.0], [1.69880754E12, 2.0], [1.69880634E12, 2.0], [1.69881156E12, 2.0], [1.69880412E12, 2.0], [1.69880574E12, 2.0], [1.69880856E12, 5.0], [1.6988061E12, 2.0], [1.69880388E12, 2.0], [1.6988055E12, 12.0], [1.69880832E12, 7.0], [1.6988118E12, 2.0], [1.69880652E12, 2.0], [1.69880328E12, 51.0], [1.69881138E12, 2.0], [1.69880814E12, 262.9000000000001], [1.6988043E12, 2.0], [1.69880712E12, 2.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6988085E12, 136.0], [1.69881132E12, 3.0], [1.69880406E12, 2481.1399999999994], [1.69880628E12, 3.0], [1.169880336E13, 272.0], [1.69880346E12, 78.0], [1.69880568E12, 3.0], [1.6988073E12, 11.0], [1.69880646E12, 4.0], [1.69881114E12, 3.0], [1.69880544E12, 629.2999999999993], [1.69880706E12, 3.0], [1.6988091E12, 68.0], [1.69881072E12, 501.6700000002129], [1.69880424E12, 3194.499999998625], [1.69880586E12, 5.0], [1.69880748E12, 9.0], [1.69880364E12, 1408.0699999999997], [1.69881174E12, 4.0], [1.69880724E12, 10.0], [1.698804E12, 2040.0], [1.69880562E12, 7.0], [1.69881066E12, 721.2000000000016], [1.6988034E12, 518.9800000000032], [1.69881186E12, 3.0], [1.69881126E12, 3.0], [1.69880382E12, 1032.7700000000368], [1.69880604E12, 6.0], [1.69880826E12, 182.0], [1.69880418E12, 2695.0], [1.69880742E12, 9.0], [1.6988064E12, 3.0], [1.6988115E12, 3.0], [1.69880358E12, 1256.0], [1.6988058E12, 3.0], [1.69880844E12, 102.0], [1.69881168E12, 3.0], [1.69881108E12, 4.0], [1.69880622E12, 3.0], [1.69880904E12, 850.3200000000015], [1.6988082E12, 154.9900000000016], [1.69881162E12, 5.0], [1.69880598E12, 3.0], [1.69880436E12, 6311.0], [1.69881102E12, 3.0], [1.698807E12, 3.0], [1.69880862E12, 132.0], [1.6988112E12, 3.0], [1.69880376E12, 973.0], [1.6988076E12, 3.0], [1.69881144E12, 3.0], [1.69880352E12, 373.1100000000006], [1.69880838E12, 190.0], [1.69880736E12, 6.0], [1.69880718E12, 5.0], [1.69880394E12, 1333.9900000000016], [1.69880616E12, 3.0], [1.69880334E12, 633.5], [1.69880556E12, 4.0], [1.69881096E12, 3.0], [1.69880694E12, 5.0], [1.6988037E12, 868.0], [1.69880592E12, 4.0], [1.69880754E12, 4.0], [1.69880634E12, 3.0], [1.69881156E12, 3.0], [1.69880412E12, 2450.0], [1.69880574E12, 3.0], [1.69880856E12, 131.0], [1.6988061E12, 4.0], [1.69880388E12, 1053.0], [1.6988055E12, 166.48000000008324], [1.69880832E12, 169.0], [1.6988118E12, 3.0], [1.69880652E12, 3.0], [1.69880328E12, 354.9700000000048], [1.69881138E12, 6.0], [1.69880814E12, 706.8800000000001], [1.6988043E12, 3566.0], [1.69880712E12, 3.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6988085E12, 9.0], [1.69881132E12, 2.0], [1.69880406E12, 4.0], [1.69880628E12, 2.0], [1.169880336E13, 272.0], [1.69880346E12, 3.0], [1.69880568E12, 2.0], [1.6988073E12, 5.0], [1.69880646E12, 2.0], [1.69881114E12, 2.0], [1.69880544E12, 178.0], [1.69880706E12, 2.0], [1.6988091E12, 31.950000000000728], [1.69881072E12, 24.0], [1.69880424E12, 2.0], [1.69880586E12, 2.0], [1.69880748E12, 5.0], [1.69880364E12, 4.0], [1.69881174E12, 2.0], [1.69880724E12, 4.0], [1.698804E12, 3.0], [1.69880562E12, 5.0], [1.69881066E12, 166.0], [1.6988034E12, 3.0], [1.69881186E12, 2.0], [1.69881126E12, 2.0], [1.69880382E12, 3.0], [1.69880604E12, 3.0], [1.69880826E12, 4.0], [1.69880418E12, 3.0], [1.69880742E12, 5.0], [1.6988064E12, 2.0], [1.6988115E12, 2.0], [1.69880358E12, 4.0], [1.6988058E12, 2.0], [1.69880844E12, 13.0], [1.69881168E12, 2.0], [1.69881108E12, 2.0], [1.69880622E12, 2.0], [1.69880904E12, 339.99999999999966], [1.6988082E12, 10.0], [1.69881162E12, 3.0], [1.69880598E12, 2.0], [1.69880436E12, 3.0], [1.69881102E12, 2.0], [1.698807E12, 2.0], [1.69880862E12, 6.0], [1.6988112E12, 2.0], [1.69880376E12, 3.0], [1.6988076E12, 2.0], [1.69881144E12, 2.0], [1.69880352E12, 4.0], [1.69880838E12, 8.0], [1.69880736E12, 3.0], [1.69880718E12, 2.0], [1.69880394E12, 3.0], [1.69880616E12, 2.0], [1.69880334E12, 14.0], [1.69880556E12, 2.0], [1.69881096E12, 2.0], [1.69880694E12, 2.0], [1.6988037E12, 3.0], [1.69880592E12, 2.0], [1.69880754E12, 2.0], [1.69880634E12, 2.0], [1.69881156E12, 2.0], [1.69880412E12, 4.0], [1.69880574E12, 2.0], [1.69880856E12, 8.0], [1.6988061E12, 2.0], [1.69880388E12, 3.0], [1.6988055E12, 19.0], [1.69880832E12, 11.0], [1.6988118E12, 2.0], [1.69880652E12, 2.0], [1.69880328E12, 82.0], [1.69881138E12, 3.0], [1.69880814E12, 401.89999999999964], [1.6988043E12, 2.0], [1.69880712E12, 2.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6988085E12, 0.0], [1.69881132E12, 0.0], [1.69880406E12, 0.0], [1.69880628E12, 0.0], [1.169880336E13, 272.0], [1.69880346E12, 0.0], [1.69880568E12, 0.0], [1.6988073E12, 0.0], [1.69880646E12, 0.0], [1.69881114E12, 0.0], [1.69880544E12, 2.0], [1.69880706E12, 0.0], [1.6988091E12, 0.0], [1.69881072E12, 0.0], [1.69880424E12, 0.0], [1.69880586E12, 0.0], [1.69880748E12, 0.0], [1.69880364E12, 0.0], [1.69881174E12, 0.0], [1.69880724E12, 0.0], [1.698804E12, 0.0], [1.69880562E12, 0.0], [1.69881066E12, 2.0], [1.6988034E12, 0.0], [1.69881186E12, 0.0], [1.69881126E12, 0.0], [1.69880382E12, 0.0], [1.69880604E12, 0.0], [1.69880826E12, 0.0], [1.69880418E12, 0.0], [1.69880742E12, 0.0], [1.6988064E12, 0.0], [1.6988115E12, 0.0], [1.69880358E12, 0.0], [1.6988058E12, 0.0], [1.69880844E12, 0.0], [1.69881168E12, 0.0], [1.69881108E12, 0.0], [1.69880622E12, 0.0], [1.69880904E12, 3.0], [1.6988082E12, 0.0], [1.69881162E12, 0.0], [1.69880598E12, 0.0], [1.69880436E12, 0.0], [1.69881102E12, 0.0], [1.698807E12, 0.0], [1.69880862E12, 0.0], [1.6988112E12, 0.0], [1.69880376E12, 0.0], [1.6988076E12, 0.0], [1.69881144E12, 0.0], [1.69880352E12, 0.0], [1.69880838E12, 0.0], [1.69880736E12, 0.0], [1.69880718E12, 0.0], [1.69880394E12, 0.0], [1.69880616E12, 0.0], [1.69880334E12, 0.0], [1.69880556E12, 0.0], [1.69881096E12, 0.0], [1.69880694E12, 0.0], [1.6988037E12, 0.0], [1.69880592E12, 0.0], [1.69880754E12, 0.0], [1.69880634E12, 0.0], [1.69881156E12, 0.0], [1.69880412E12, 0.0], [1.69880574E12, 0.0], [1.69880856E12, 0.0], [1.6988061E12, 0.0], [1.69880388E12, 0.0], [1.6988055E12, 0.0], [1.69880832E12, 0.0], [1.6988118E12, 0.0], [1.69880652E12, 0.0], [1.69880328E12, 1.0], [1.69881138E12, 0.0], [1.69880814E12, 2.0], [1.6988043E12, 0.0], [1.69880712E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6988085E12, 2.0], [1.69881132E12, 1.0], [1.69880406E12, 1.0], [1.69880628E12, 1.0], [1.169880336E13, 272.0], [1.69880346E12, 1.0], [1.69880568E12, 1.0], [1.6988073E12, 1.0], [1.69880646E12, 1.0], [1.69881114E12, 1.0], [1.69880544E12, 34.0], [1.69880706E12, 1.0], [1.6988091E12, 3.0], [1.69881072E12, 2.0], [1.69880424E12, 1.0], [1.69880586E12, 1.0], [1.69880748E12, 1.0], [1.69880364E12, 1.0], [1.69881174E12, 1.0], [1.69880724E12, 1.0], [1.698804E12, 1.0], [1.69880562E12, 1.0], [1.69881066E12, 26.0], [1.6988034E12, 1.0], [1.69881186E12, 1.0], [1.69881126E12, 1.0], [1.69880382E12, 1.0], [1.69880604E12, 1.0], [1.69880826E12, 1.0], [1.69880418E12, 1.0], [1.69880742E12, 1.0], [1.6988064E12, 1.0], [1.6988115E12, 1.0], [1.69880358E12, 1.0], [1.6988058E12, 1.0], [1.69880844E12, 2.0], [1.69881168E12, 1.0], [1.69881108E12, 1.0], [1.69880622E12, 1.0], [1.69880904E12, 36.0], [1.6988082E12, 1.0], [1.69881162E12, 1.0], [1.69880598E12, 1.0], [1.69880436E12, 1.0], [1.69881102E12, 1.0], [1.698807E12, 1.0], [1.69880862E12, 1.0], [1.6988112E12, 1.0], [1.69880376E12, 1.0], [1.6988076E12, 1.0], [1.69881144E12, 1.0], [1.69880352E12, 1.0], [1.69880838E12, 1.0], [1.69880736E12, 1.0], [1.69880718E12, 1.0], [1.69880394E12, 1.0], [1.69880616E12, 1.0], [1.69880334E12, 2.0], [1.69880556E12, 1.0], [1.69881096E12, 1.0], [1.69880694E12, 1.0], [1.6988037E12, 1.0], [1.69880592E12, 1.0], [1.69880754E12, 1.0], [1.69880634E12, 1.0], [1.69881156E12, 1.0], [1.69880412E12, 1.0], [1.69880574E12, 1.0], [1.69880856E12, 1.0], [1.6988061E12, 1.0], [1.69880388E12, 1.0], [1.6988055E12, 3.0], [1.69880832E12, 1.0], [1.6988118E12, 1.0], [1.69880652E12, 1.0], [1.69880328E12, 6.0], [1.69881138E12, 1.0], [1.69880814E12, 17.0], [1.6988043E12, 1.0], [1.69880712E12, 1.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.169880336E13, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 22088.0, "series": [{"data": [[2.0, 1680.5], [4.0, 1.0], [6.0, 1070.0], [8.0, 242.0], [10.0, 1284.0], [11.0, 20044.0], [12.0, 18571.5], [13.0, 1055.0], [14.0, 17451.5], [16.0, 17960.0], [17.0, 2948.0], [20.0, 3301.5], [21.0, 4155.0], [24.0, 6309.0], [26.0, 18628.5], [27.0, 3696.0], [28.0, 16388.0], [29.0, 2892.0], [31.0, 11868.5], [33.0, 18105.0], [32.0, 15775.0], [34.0, 16601.5], [35.0, 826.0], [37.0, 15741.0], [36.0, 4854.0], [38.0, 15319.0], [39.0, 5726.0], [41.0, 18732.0], [43.0, 19163.0], [42.0, 18465.5], [45.0, 16677.0], [44.0, 5016.0], [46.0, 5257.5], [47.0, 18499.5], [49.0, 540.0], [51.0, 10157.5], [52.0, 18507.5], [53.0, 1.0], [55.0, 5283.0], [56.0, 2.0], [57.0, 5436.0], [58.0, 5333.5], [60.0, 4837.0], [63.0, 2619.0], [65.0, 14529.0], [69.0, 5329.0], [71.0, 4845.5], [73.0, 14908.0], [77.0, 1.0], [81.0, 15321.0], [80.0, 14378.5], [86.0, 22088.0], [102.0, 15.5], [105.0, 516.0], [104.0, 5.5], [106.0, 6.5], [109.0, 6.0], [119.0, 496.0], [122.0, 2.0], [155.0, 473.0], [165.0, 3.0], [167.0, 253.0], [173.0, 5.0], [186.0, 1.0], [185.0, 60.0], [214.0, 1.0], [256.0, 1.0], [286.0, 1.0], [300.0, 1.0], [289.0, 1.0], [298.0, 46.0], [325.0, 72.0], [320.0, 3.0], [322.0, 4.0], [360.0, 12.0], [374.0, 2.0], [393.0, 1.0], [402.0, 1.0], [413.0, 1.0], [430.0, 12.0], [454.0, 5.0], [450.0, 1.0], [467.0, 1.0], [507.0, 1.0], [506.0, 12.0], [497.0, 12.0], [543.0, 1.0], [517.0, 4.0], [515.0, 1.0], [540.0, 43.0], [522.0, 2.0], [567.0, 4.0], [569.0, 3.0], [586.0, 35.0], [618.0, 1.0], [619.0, 1.0], [631.0, 3.0], [617.0, 34.0], [645.0, 18.0], [668.0, 10.0], [661.0, 1.0], [652.0, 12.0], [647.0, 4.0], [671.0, 25.0], [696.0, 40.0], [700.0, 1.0], [684.0, 24.0], [718.0, 1.0], [734.0, 1.0], [723.0, 1.0], [729.0, 37.0], [730.0, 33.0], [759.0, 11.0], [783.0, 3.0], [852.0, 12.5], [856.0, 1.0], [850.0, 1.0], [858.0, 19.0], [844.0, 2.0], [867.0, 10.0], [868.0, 3.0], [889.0, 29.0], [902.0, 1.0], [915.0, 4.0], [911.0, 1.0], [912.0, 31.5], [937.0, 3.0], [950.0, 4.0], [941.0, 27.0], [958.0, 25.0], [960.0, 30.0], [966.0, 27.0], [965.0, 2.0], [1020.0, 1.0], [1001.0, 1.0], [1000.0, 1.0], [1005.0, 1.0], [995.0, 3.0], [1046.0, 25.0], [1081.0, 5.0], [1047.0, 2.0], [1078.0, 2.0], [1068.0, 1.0], [1040.0, 23.5], [1087.0, 23.0], [1032.0, 16.0], [1150.0, 1.0], [1110.0, 2.0], [1100.0, 1.0], [1151.0, 14.0], [1090.0, 1.0], [1132.0, 22.0], [1092.0, 20.0], [1123.0, 2.0], [1195.0, 1.0], [1176.0, 25.0], [1205.0, 18.0], [1158.0, 2.0], [1201.0, 2.0], [1233.0, 12.0], [1277.0, 1.0], [1254.0, 2.0], [1250.0, 1.0], [1226.0, 3.0], [1218.0, 2.0], [1295.0, 22.0], [1340.0, 1.0], [1334.0, 1.0], [1339.0, 1.0], [1333.0, 13.0], [1290.0, 21.0], [1309.0, 2.0], [1396.0, 12.0], [1349.0, 1.0], [1373.0, 2.0], [1350.0, 1.0], [1399.0, 1.0], [1404.0, 9.0], [1344.0, 3.0], [1352.0, 1.0], [1405.0, 1.0], [1388.0, 9.0], [1377.0, 3.0], [1443.0, 3.0], [1469.0, 1.0], [1441.0, 1.0], [1413.0, 1.0], [1440.0, 5.0], [1442.0, 8.0], [1487.0, 1.0], [1483.0, 13.0], [1484.0, 1.0], [1481.0, 5.0], [1501.0, 8.0], [1476.0, 4.0], [1512.0, 1.0], [1509.0, 7.0], [1506.0, 3.0], [1490.0, 1.0], [1500.0, 12.0], [1523.0, 2.0], [1535.0, 10.0], [1505.0, 2.0], [1517.0, 1.0], [1548.0, 1.0], [1541.0, 13.0], [1536.0, 1.0], [1565.0, 2.0], [1550.0, 1.0], [1588.0, 1.0], [1563.0, 1.0], [1552.0, 1.0], [1561.0, 1.0], [1560.0, 9.0], [1582.0, 1.0], [1575.0, 1.0], [1555.0, 1.0], [1593.0, 1.0], [1659.0, 1.0], [1651.0, 1.0], [1600.0, 1.0], [1601.0, 10.0], [1605.0, 2.0], [1607.0, 2.0], [1649.0, 1.0], [1650.0, 1.0], [1622.0, 7.0], [1628.0, 2.0], [1631.0, 1.0], [1625.0, 1.0], [1617.0, 4.0], [1643.0, 2.0], [1642.0, 1.0], [1644.0, 1.0], [1645.0, 1.0], [1647.0, 1.0], [1640.0, 1.0], [1633.0, 1.0], [1635.0, 1.0], [1637.0, 1.0], [1639.0, 1.0], [1663.0, 1.0], [1660.0, 1.0], [1662.0, 2.0], [1661.0, 1.0], [1652.0, 1.0], [1653.0, 3.0], [1657.0, 1.0], [1658.0, 1.0], [1656.0, 1.0], [1655.0, 1.0], [1674.0, 1.0], [1694.0, 5.0], [1712.0, 4.5], [1678.0, 2.0], [1677.0, 1.0], [1722.0, 3.0], [1720.0, 1.0], [1716.0, 1.0], [1717.0, 1.0], [1721.0, 1.0], [1676.0, 1.0], [1675.0, 2.0], [1681.0, 2.0], [1682.0, 1.0], [1711.0, 1.0], [1710.0, 2.0], [1726.0, 2.0], [1725.0, 2.0], [1696.0, 2.0], [1697.0, 2.0], [1700.0, 1.0], [1701.0, 1.0], [1705.0, 2.0], [1708.0, 1.0], [1699.0, 1.0], [1698.0, 1.0], [1709.0, 2.0], [1673.0, 1.0], [1672.0, 1.0], [1669.0, 2.0], [1668.0, 2.0], [1666.0, 2.0], [1664.0, 1.0], [1667.0, 1.0], [1692.0, 1.0], [1691.0, 1.0], [1690.0, 1.0], [1689.0, 1.0], [1687.0, 1.0], [1684.0, 1.0], [1683.0, 1.0], [1723.0, 2.0], [1743.0, 1.0], [1754.0, 1.0], [1748.0, 2.0], [1751.0, 1.0], [1752.0, 1.0], [1753.0, 7.0], [1750.0, 1.0], [1749.0, 1.0], [1745.0, 2.0], [1788.0, 2.0], [1768.0, 1.0], [1766.0, 1.0], [1772.0, 1.0], [1771.0, 2.0], [1764.0, 2.0], [1763.0, 2.0], [1761.0, 1.0], [1790.0, 1.0], [1777.0, 1.0], [1778.0, 1.0], [1782.0, 1.0], [1781.0, 1.0], [1784.0, 2.0], [1787.0, 1.0], [1786.0, 1.0], [1785.0, 1.0], [1758.0, 1.0], [1732.0, 3.0], [1755.0, 1.0], [1757.0, 1.0], [1765.0, 1.0], [1850.0, 1.0], [1841.0, 5.0], [1800.0, 1.0], [1824.0, 1.0], [1829.0, 1.0], [1832.0, 1.0], [1828.0, 1.0], [1837.0, 2.0], [1839.0, 2.0], [1855.0, 1.0], [1854.0, 1.0], [1851.0, 2.0], [1852.0, 2.0], [1843.0, 1.0], [1847.0, 3.0], [1803.0, 1.0], [1801.0, 1.0], [1807.0, 1.0], [1805.0, 3.0], [1804.0, 1.0], [1796.0, 1.0], [1799.0, 1.0], [1798.0, 4.0], [1812.0, 1.0], [1819.0, 1.0], [1795.0, 1.0], [1794.0, 1.0], [1792.0, 2.0], [1888.0, 1.0], [1903.0, 2.0], [1902.0, 1.0], [1895.0, 1.0], [1899.0, 1.0], [1900.0, 1.0], [1880.0, 1.0], [1883.0, 1.0], [1879.0, 1.0], [1886.0, 1.0], [1887.0, 1.0], [1878.0, 1.0], [1876.0, 1.0], [1872.0, 2.0], [1859.0, 1.0], [1867.0, 2.0], [1869.0, 1.0], [1909.0, 1.0], [1906.0, 1.0], [1863.0, 3.0], [1861.0, 1.0], [1911.0, 1.0], [1917.0, 1.0], [1913.0, 2.0], [1951.0, 1.0], [1946.0, 3.0], [1950.0, 2.0], [1948.0, 2.0], [1947.0, 2.0], [1979.0, 2.0], [1983.0, 1.0], [1980.0, 2.0], [1982.0, 1.0], [1964.0, 1.0], [1965.0, 1.0], [1961.0, 2.0], [1957.0, 3.0], [1958.0, 3.0], [1955.0, 1.0], [1952.0, 2.0], [1953.0, 1.0], [1977.0, 1.0], [1976.0, 1.0], [1978.0, 1.0], [1975.0, 3.0], [1972.0, 1.0], [1968.0, 3.0], [1933.0, 1.0], [1931.0, 1.0], [1945.0, 2.0], [1937.0, 3.0], [1941.0, 1.0], [1940.0, 2.0], [1943.0, 2.0], [1944.0, 1.0], [1921.0, 2.0], [1924.0, 4.0], [1929.0, 2.0], [1987.0, 2.0], [2000.0, 1.0], [1998.0, 1.0], [1997.0, 1.0], [1996.0, 1.0], [1992.0, 2.0], [1991.0, 1.0], [1990.0, 1.0], [1988.0, 2.0], [1989.0, 1.0], [1995.0, 1.0], [1993.0, 1.0], [1994.0, 1.0], [2001.0, 1.0], [1999.0, 1.0], [1986.0, 1.0], [1985.0, 2.0], [2015.0, 3.0], [2012.0, 1.0], [2010.0, 2.0], [2006.0, 1.0], [2008.0, 1.0], [2009.0, 1.0], [2007.0, 1.0], [2004.0, 1.0], [2005.0, 1.0], [2032.0, 1.0], [2028.0, 1.0], [2022.0, 1.0], [2016.0, 1.0], [2040.0, 1.0], [2043.0, 2.0], [2019.0, 1.0], [2002.0, 1.0], [2003.0, 1.0], [2050.0, 1.0], [1.0, 415.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1157.0, 1.0], [780.0, 6.0], [1723.0, 45.5], [2017.0, 2.0], [2009.0, 1.0], [2001.0, 1.0], [1999.0, 1.0], [2000.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2050.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[2.0, 0.0], [4.0, 0.0], [6.0, 0.0], [8.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [16.0, 0.0], [17.0, 0.0], [20.0, 0.0], [21.0, 0.0], [24.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [34.0, 0.0], [35.0, 0.0], [37.0, 0.0], [36.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [46.0, 0.0], [47.0, 0.0], [49.0, 0.0], [51.0, 0.0], [52.0, 0.0], [53.0, 0.0], [55.0, 0.0], [56.0, 0.0], [57.0, 0.0], [58.0, 0.0], [60.0, 0.0], [63.0, 0.0], [65.0, 0.0], [69.0, 0.0], [71.0, 0.0], [73.0, 0.0], [77.0, 0.0], [81.0, 0.0], [80.0, 0.0], [86.0, 0.0], [102.0, 0.0], [105.0, 0.0], [104.0, 0.0], [106.0, 0.0], [109.0, 0.0], [119.0, 0.0], [122.0, 0.0], [155.0, 0.0], [165.0, 0.0], [167.0, 0.0], [173.0, 0.0], [186.0, 0.0], [185.0, 0.0], [214.0, 0.0], [256.0, 0.0], [286.0, 0.0], [300.0, 0.0], [289.0, 0.0], [298.0, 0.0], [325.0, 0.0], [320.0, 0.0], [322.0, 0.0], [360.0, 0.0], [374.0, 0.0], [393.0, 0.0], [402.0, 0.0], [413.0, 0.0], [430.0, 0.0], [454.0, 0.0], [450.0, 0.0], [467.0, 0.0], [507.0, 0.0], [506.0, 0.0], [497.0, 0.0], [543.0, 0.0], [517.0, 0.0], [515.0, 0.0], [540.0, 0.0], [522.0, 0.0], [567.0, 0.0], [569.0, 0.0], [586.0, 0.0], [618.0, 0.0], [619.0, 0.0], [631.0, 0.0], [617.0, 0.0], [645.0, 0.0], [668.0, 0.0], [661.0, 0.0], [652.0, 0.0], [647.0, 0.0], [671.0, 0.0], [696.0, 0.0], [700.0, 0.0], [684.0, 0.0], [718.0, 0.0], [734.0, 0.0], [723.0, 0.0], [729.0, 0.0], [730.0, 0.0], [759.0, 0.0], [783.0, 0.0], [852.0, 0.0], [856.0, 0.0], [850.0, 0.0], [858.0, 0.0], [844.0, 0.0], [867.0, 0.0], [868.0, 0.0], [889.0, 0.0], [902.0, 0.0], [915.0, 0.0], [911.0, 0.0], [912.0, 0.0], [937.0, 0.0], [950.0, 0.0], [941.0, 0.0], [958.0, 0.0], [960.0, 0.0], [966.0, 0.0], [965.0, 0.0], [1020.0, 0.0], [1001.0, 0.0], [1000.0, 0.0], [1005.0, 0.0], [995.0, 0.0], [1046.0, 0.0], [1081.0, 0.0], [1047.0, 0.0], [1078.0, 0.0], [1068.0, 0.0], [1040.0, 0.0], [1087.0, 0.0], [1032.0, 0.0], [1150.0, 0.0], [1110.0, 0.0], [1100.0, 0.0], [1151.0, 0.0], [1090.0, 0.0], [1132.0, 0.0], [1092.0, 0.0], [1123.0, 0.0], [1195.0, 0.0], [1176.0, 0.0], [1205.0, 0.0], [1158.0, 0.0], [1201.0, 0.0], [1233.0, 0.0], [1277.0, 0.0], [1254.0, 0.0], [1250.0, 0.0], [1226.0, 0.0], [1218.0, 0.0], [1295.0, 0.0], [1340.0, 0.0], [1334.0, 0.0], [1339.0, 0.0], [1333.0, 0.0], [1290.0, 0.0], [1309.0, 0.0], [1396.0, 0.0], [1349.0, 0.0], [1373.0, 0.0], [1350.0, 0.0], [1399.0, 0.0], [1404.0, 0.0], [1344.0, 0.0], [1352.0, 0.0], [1405.0, 0.0], [1388.0, 0.0], [1377.0, 0.0], [1443.0, 0.0], [1469.0, 0.0], [1441.0, 0.0], [1413.0, 0.0], [1440.0, 0.0], [1442.0, 0.0], [1487.0, 0.0], [1483.0, 0.0], [1484.0, 0.0], [1481.0, 0.0], [1501.0, 0.0], [1476.0, 0.0], [1512.0, 0.0], [1509.0, 0.0], [1506.0, 0.0], [1490.0, 0.0], [1500.0, 0.0], [1523.0, 0.0], [1535.0, 0.0], [1505.0, 0.0], [1517.0, 0.0], [1548.0, 0.0], [1541.0, 0.0], [1536.0, 0.0], [1565.0, 0.0], [1550.0, 0.0], [1588.0, 0.0], [1563.0, 0.0], [1552.0, 0.0], [1561.0, 0.0], [1560.0, 0.0], [1582.0, 0.0], [1575.0, 0.0], [1555.0, 0.0], [1593.0, 0.0], [1659.0, 0.0], [1651.0, 0.0], [1600.0, 0.0], [1601.0, 0.0], [1605.0, 0.0], [1607.0, 0.0], [1649.0, 0.0], [1650.0, 0.0], [1622.0, 0.0], [1628.0, 0.0], [1631.0, 0.0], [1625.0, 0.0], [1617.0, 0.0], [1643.0, 0.0], [1642.0, 0.0], [1644.0, 0.0], [1645.0, 0.0], [1647.0, 0.0], [1640.0, 0.0], [1633.0, 0.0], [1635.0, 0.0], [1637.0, 0.0], [1639.0, 0.0], [1663.0, 0.0], [1660.0, 0.0], [1662.0, 0.0], [1661.0, 0.0], [1652.0, 0.0], [1653.0, 0.0], [1657.0, 0.0], [1658.0, 0.0], [1656.0, 0.0], [1655.0, 0.0], [1674.0, 0.0], [1694.0, 0.0], [1712.0, 0.0], [1678.0, 0.0], [1677.0, 0.0], [1722.0, 0.0], [1720.0, 0.0], [1716.0, 0.0], [1717.0, 0.0], [1721.0, 0.0], [1676.0, 0.0], [1675.0, 0.0], [1681.0, 0.0], [1682.0, 0.0], [1711.0, 0.0], [1710.0, 0.0], [1726.0, 0.0], [1725.0, 0.0], [1696.0, 0.0], [1697.0, 0.0], [1700.0, 0.0], [1701.0, 0.0], [1705.0, 0.0], [1708.0, 0.0], [1699.0, 0.0], [1698.0, 0.0], [1709.0, 0.0], [1673.0, 0.0], [1672.0, 0.0], [1669.0, 0.0], [1668.0, 0.0], [1666.0, 0.0], [1664.0, 0.0], [1667.0, 0.0], [1692.0, 0.0], [1691.0, 0.0], [1690.0, 0.0], [1689.0, 0.0], [1687.0, 0.0], [1684.0, 0.0], [1683.0, 0.0], [1723.0, 0.0], [1743.0, 0.0], [1754.0, 0.0], [1748.0, 0.0], [1751.0, 0.0], [1752.0, 0.0], [1753.0, 0.0], [1750.0, 0.0], [1749.0, 0.0], [1745.0, 0.0], [1788.0, 0.0], [1768.0, 0.0], [1766.0, 0.0], [1772.0, 0.0], [1771.0, 0.0], [1764.0, 0.0], [1763.0, 0.0], [1761.0, 0.0], [1790.0, 0.0], [1777.0, 0.0], [1778.0, 0.0], [1782.0, 0.0], [1781.0, 0.0], [1784.0, 0.0], [1787.0, 0.0], [1786.0, 0.0], [1785.0, 0.0], [1758.0, 0.0], [1732.0, 0.0], [1755.0, 0.0], [1757.0, 0.0], [1765.0, 0.0], [1850.0, 0.0], [1841.0, 0.0], [1800.0, 0.0], [1824.0, 0.0], [1829.0, 0.0], [1832.0, 0.0], [1828.0, 0.0], [1837.0, 0.0], [1839.0, 0.0], [1855.0, 0.0], [1854.0, 0.0], [1851.0, 0.0], [1852.0, 0.0], [1843.0, 0.0], [1847.0, 0.0], [1803.0, 0.0], [1801.0, 0.0], [1807.0, 0.0], [1805.0, 0.0], [1804.0, 0.0], [1796.0, 0.0], [1799.0, 0.0], [1798.0, 0.0], [1812.0, 0.0], [1819.0, 0.0], [1795.0, 0.0], [1794.0, 0.0], [1792.0, 0.0], [1888.0, 0.0], [1903.0, 0.0], [1902.0, 0.0], [1895.0, 0.0], [1899.0, 0.0], [1900.0, 0.0], [1880.0, 0.0], [1883.0, 0.0], [1879.0, 0.0], [1886.0, 0.0], [1887.0, 0.0], [1878.0, 0.0], [1876.0, 0.0], [1872.0, 0.0], [1859.0, 0.0], [1867.0, 0.0], [1869.0, 0.0], [1909.0, 0.0], [1906.0, 0.0], [1863.0, 0.0], [1861.0, 0.0], [1911.0, 0.0], [1917.0, 0.0], [1913.0, 0.0], [1951.0, 0.0], [1946.0, 0.0], [1950.0, 0.0], [1948.0, 0.0], [1947.0, 0.0], [1979.0, 0.0], [1983.0, 0.0], [1980.0, 0.0], [1982.0, 0.0], [1964.0, 0.0], [1965.0, 0.0], [1961.0, 0.0], [1957.0, 0.0], [1958.0, 0.0], [1955.0, 0.0], [1952.0, 0.0], [1953.0, 0.0], [1977.0, 0.0], [1976.0, 0.0], [1978.0, 0.0], [1975.0, 0.0], [1972.0, 0.0], [1968.0, 0.0], [1933.0, 0.0], [1931.0, 0.0], [1945.0, 0.0], [1937.0, 0.0], [1941.0, 0.0], [1940.0, 0.0], [1943.0, 0.0], [1944.0, 0.0], [1921.0, 0.0], [1924.0, 0.0], [1929.0, 0.0], [1987.0, 0.0], [2000.0, 0.0], [1998.0, 0.0], [1997.0, 0.0], [1996.0, 0.0], [1992.0, 0.0], [1991.0, 0.0], [1990.0, 0.0], [1988.0, 0.0], [1989.0, 0.0], [1995.0, 0.0], [1993.0, 0.0], [1994.0, 0.0], [2001.0, 0.0], [1999.0, 0.0], [1986.0, 0.0], [1985.0, 0.0], [2015.0, 0.0], [2012.0, 0.0], [2010.0, 0.0], [2006.0, 0.0], [2008.0, 0.0], [2009.0, 0.0], [2007.0, 0.0], [2004.0, 0.0], [2005.0, 0.0], [2032.0, 0.0], [2028.0, 0.0], [2022.0, 0.0], [2016.0, 0.0], [2040.0, 0.0], [2043.0, 0.0], [2019.0, 0.0], [2002.0, 0.0], [2003.0, 0.0], [2050.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1157.0, 0.0], [780.0, 0.0], [1723.0, 0.0], [2017.0, 0.0], [2009.0, 0.0], [2001.0, 0.0], [1999.0, 0.0], [2000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2050.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69880328E12, "maxY": 2000.0833333333333, "series": [{"data": [[1.6988085E12, 1687.1], [1.69881132E12, 1999.9666666666667], [1.69880406E12, 333.0833333333333], [1.69880628E12, 1999.9833333333333], [1.169880336E13, 0.016666666666666666], [1.69880346E12, 381.3], [1.69880568E12, 2000.0833333333333], [1.6988073E12, 2000.0], [1.69880646E12, 1976.4333333333334], [1.69880868E12, 199.38333333333333], [1.69881114E12, 2000.0], [1.69880544E12, 102.13333333333334], [1.69880706E12, 2000.0], [1.6988091E12, 469.8333333333333], [1.69881072E12, 1245.3666666666666], [1.69880424E12, 333.23333333333335], [1.69880586E12, 1998.0], [1.69880748E12, 2000.0], [1.69880364E12, 333.2], [1.69881174E12, 1999.9833333333333], [1.69880724E12, 1998.1333333333334], [1.698804E12, 333.18333333333334], [1.69880562E12, 1193.0833333333333], [1.69881066E12, 101.15], [1.6988034E12, 416.85], [1.69881186E12, 906.8], [1.69881126E12, 1999.9666666666667], [1.69880382E12, 381.85], [1.69880604E12, 1997.9166666666667], [1.69880826E12, 1493.7166666666667], [1.69880418E12, 333.23333333333335], [1.69880742E12, 2000.0], [1.6988064E12, 2000.0333333333333], [1.6988115E12, 1999.95], [1.69880358E12, 333.18333333333334], [1.6988058E12, 2000.0], [1.69880844E12, 1829.05], [1.69881168E12, 1994.7833333333333], [1.69881108E12, 2000.0], [1.69880622E12, 2000.0], [1.69880904E12, 16.016666666666666], [1.6988082E12, 1505.5666666666666], [1.69881162E12, 1998.9833333333333], [1.69880598E12, 2000.0], [1.69880436E12, 166.53333333333333], [1.69881102E12, 2000.0], [1.698807E12, 2000.0], [1.69880862E12, 898.5833333333334], [1.6988112E12, 1999.9833333333333], [1.69880376E12, 334.03333333333336], [1.6988076E12, 1469.75], [1.69881144E12, 1999.8833333333334], [1.69880352E12, 333.1333333333333], [1.69880838E12, 1850.7], [1.69880736E12, 2000.0], [1.69880718E12, 1995.2333333333333], [1.69880394E12, 345.25], [1.69880616E12, 1994.4166666666667], [1.69880334E12, 200.6], [1.69880556E12, 1997.5333333333333], [1.69881096E12, 1082.8333333333333], [1.69880694E12, 704.6666666666666], [1.6988037E12, 333.45], [1.69880592E12, 1999.9666666666667], [1.69880754E12, 2000.0], [1.69880634E12, 2000.0], [1.69881156E12, 2000.0], [1.69880412E12, 333.26666666666665], [1.69880574E12, 1999.9], [1.69880856E12, 1796.2666666666667], [1.6988061E12, 1999.8166666666666], [1.69880388E12, 439.06666666666666], [1.6988055E12, 1619.9666666666667], [1.69880832E12, 1846.1333333333334], [1.6988118E12, 2000.0], [1.69880652E12, 1200.8666666666666], [1.69880328E12, 336.0833333333333], [1.69881138E12, 1998.0833333333333], [1.69880814E12, 27.283333333333335], [1.6988043E12, 334.9], [1.69880712E12, 1999.9833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.169880336E13, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69880328E12, "maxY": 2000.0333333333333, "series": [{"data": [[1.69880646E12, 3.533333333333333], [1.69880868E12, 199.38333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.6988085E12, 1687.0666666666666], [1.69881132E12, 1999.9666666666667], [1.69880406E12, 333.0833333333333], [1.69880628E12, 1999.9666666666667], [1.169880336E13, 0.016666666666666666], [1.69880346E12, 380.51666666666665], [1.69880568E12, 2000.0166666666667], [1.6988073E12, 2000.0], [1.69880646E12, 1972.9333333333334], [1.69881114E12, 1999.9666666666667], [1.69880544E12, 101.4], [1.69880706E12, 2000.0], [1.6988091E12, 470.6], [1.69881072E12, 1245.9333333333334], [1.69880424E12, 333.23333333333335], [1.69880586E12, 1998.05], [1.69880748E12, 2000.0], [1.69880364E12, 333.2], [1.69881174E12, 2000.0], [1.69880724E12, 1998.1166666666666], [1.698804E12, 333.18333333333334], [1.69880562E12, 1193.0833333333333], [1.69881066E12, 100.58333333333333], [1.6988034E12, 416.8333333333333], [1.69881186E12, 906.9166666666666], [1.69881126E12, 2000.0], [1.69880382E12, 382.6666666666667], [1.69880604E12, 1997.7166666666667], [1.69880826E12, 1493.6333333333334], [1.69880418E12, 333.23333333333335], [1.69880742E12, 2000.0], [1.6988064E12, 2000.0333333333333], [1.6988115E12, 1999.9166666666667], [1.69880358E12, 333.18333333333334], [1.6988058E12, 2000.0], [1.69880844E12, 1829.0333333333333], [1.69881168E12, 1994.65], [1.69881108E12, 2000.0166666666667], [1.69880622E12, 2000.0166666666667], [1.69880904E12, 15.25], [1.6988082E12, 1506.1833333333334], [1.69881162E12, 1999.0666666666666], [1.69880598E12, 2000.0], [1.69880436E12, 167.36666666666667], [1.69881102E12, 1999.9666666666667], [1.698807E12, 2000.0], [1.69880862E12, 899.0166666666667], [1.6988112E12, 2000.0], [1.69880376E12, 334.03333333333336], [1.6988076E12, 1469.7666666666667], [1.69881144E12, 2000.0333333333333], [1.69880352E12, 333.1333333333333], [1.69880838E12, 1850.75], [1.69880736E12, 2000.0], [1.69880718E12, 1995.2333333333333], [1.69880394E12, 344.4166666666667], [1.69880616E12, 1994.4166666666667], [1.69880334E12, 200.81666666666666], [1.69880556E12, 1997.65], [1.69881096E12, 1082.8333333333333], [1.69880694E12, 704.65], [1.6988037E12, 333.45], [1.69880592E12, 1999.9666666666667], [1.69880754E12, 2000.0], [1.69880634E12, 2000.0], [1.69881156E12, 2000.0333333333333], [1.69880412E12, 333.26666666666665], [1.69880574E12, 1999.95], [1.69880856E12, 1795.8833333333334], [1.6988061E12, 1999.9666666666667], [1.69880388E12, 439.0833333333333], [1.6988055E12, 1620.55], [1.69880832E12, 1846.1666666666667], [1.6988118E12, 2000.0], [1.69880652E12, 1200.8833333333334], [1.69880328E12, 335.8333333333333], [1.69881138E12, 1997.85], [1.69880814E12, 26.666666666666668], [1.6988043E12, 334.9], [1.69880712E12, 2000.0]], "isOverall": false, "label": "202", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.169880336E13, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69880328E12, "maxY": 2000.0333333333333, "series": [{"data": [[1.6988085E12, 1687.0666666666666], [1.69881132E12, 1999.9666666666667], [1.69880406E12, 333.0833333333333], [1.69880628E12, 1999.9666666666667], [1.169880336E13, 0.016666666666666666], [1.69880346E12, 380.51666666666665], [1.69880568E12, 2000.0166666666667], [1.6988073E12, 2000.0], [1.69880646E12, 1972.9333333333334], [1.69881114E12, 1999.9666666666667], [1.69880544E12, 101.4], [1.69880706E12, 2000.0], [1.6988091E12, 470.6], [1.69881072E12, 1245.9333333333334], [1.69880424E12, 333.23333333333335], [1.69880586E12, 1998.05], [1.69880748E12, 2000.0], [1.69880364E12, 333.2], [1.69881174E12, 2000.0], [1.69880724E12, 1998.1166666666666], [1.698804E12, 333.18333333333334], [1.69880562E12, 1193.0833333333333], [1.69881066E12, 100.58333333333333], [1.6988034E12, 416.8333333333333], [1.69881186E12, 906.9166666666666], [1.69881126E12, 2000.0], [1.69880382E12, 382.6666666666667], [1.69880604E12, 1997.7166666666667], [1.69880826E12, 1493.6333333333334], [1.69880418E12, 333.23333333333335], [1.69880742E12, 2000.0], [1.6988064E12, 2000.0333333333333], [1.6988115E12, 1999.9166666666667], [1.69880358E12, 333.18333333333334], [1.6988058E12, 2000.0], [1.69880844E12, 1829.0333333333333], [1.69881168E12, 1994.65], [1.69881108E12, 2000.0166666666667], [1.69880622E12, 2000.0166666666667], [1.69880904E12, 15.25], [1.6988082E12, 1506.1833333333334], [1.69881162E12, 1999.0666666666666], [1.69880598E12, 2000.0], [1.69880436E12, 167.36666666666667], [1.69881102E12, 1999.9666666666667], [1.698807E12, 2000.0], [1.69880862E12, 899.0166666666667], [1.6988112E12, 2000.0], [1.69880376E12, 334.03333333333336], [1.6988076E12, 1469.7666666666667], [1.69881144E12, 2000.0333333333333], [1.69880352E12, 333.1333333333333], [1.69880838E12, 1850.75], [1.69880736E12, 2000.0], [1.69880718E12, 1995.2333333333333], [1.69880394E12, 344.4166666666667], [1.69880616E12, 1994.4166666666667], [1.69880334E12, 200.81666666666666], [1.69880556E12, 1997.65], [1.69881096E12, 1082.8333333333333], [1.69880694E12, 704.65], [1.6988037E12, 333.45], [1.69880592E12, 1999.9666666666667], [1.69880754E12, 2000.0], [1.69880634E12, 2000.0], [1.69881156E12, 2000.0333333333333], [1.69880412E12, 333.26666666666665], [1.69880574E12, 1999.95], [1.69880856E12, 1795.8833333333334], [1.6988061E12, 1999.9666666666667], [1.69880388E12, 439.0833333333333], [1.6988055E12, 1620.55], [1.69880832E12, 1846.1666666666667], [1.6988118E12, 2000.0], [1.69880652E12, 1200.8833333333334], [1.69880328E12, 335.8333333333333], [1.69881138E12, 1997.85], [1.69880814E12, 26.666666666666668], [1.6988043E12, 334.9], [1.69880712E12, 2000.0]], "isOverall": false, "label": "Java Request-success", "isController": false}, {"data": [[1.69880646E12, 3.533333333333333], [1.69880868E12, 199.38333333333333]], "isOverall": false, "label": "Java Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.169880336E13, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69880328E12, "maxY": 2000.0333333333333, "series": [{"data": [[1.6988085E12, 1687.0666666666666], [1.69881132E12, 1999.9666666666667], [1.69880406E12, 333.0833333333333], [1.69880628E12, 1999.9666666666667], [1.169880336E13, 0.016666666666666666], [1.69880346E12, 380.51666666666665], [1.69880568E12, 2000.0166666666667], [1.6988073E12, 2000.0], [1.69880646E12, 1972.9333333333334], [1.69881114E12, 1999.9666666666667], [1.69880544E12, 101.4], [1.69880706E12, 2000.0], [1.6988091E12, 470.6], [1.69881072E12, 1245.9333333333334], [1.69880424E12, 333.23333333333335], [1.69880586E12, 1998.05], [1.69880748E12, 2000.0], [1.69880364E12, 333.2], [1.69881174E12, 2000.0], [1.69880724E12, 1998.1166666666666], [1.698804E12, 333.18333333333334], [1.69880562E12, 1193.0833333333333], [1.69881066E12, 100.58333333333333], [1.6988034E12, 416.8333333333333], [1.69881186E12, 906.9166666666666], [1.69881126E12, 2000.0], [1.69880382E12, 382.6666666666667], [1.69880604E12, 1997.7166666666667], [1.69880826E12, 1493.6333333333334], [1.69880418E12, 333.23333333333335], [1.69880742E12, 2000.0], [1.6988064E12, 2000.0333333333333], [1.6988115E12, 1999.9166666666667], [1.69880358E12, 333.18333333333334], [1.6988058E12, 2000.0], [1.69880844E12, 1829.0333333333333], [1.69881168E12, 1994.65], [1.69881108E12, 2000.0166666666667], [1.69880622E12, 2000.0166666666667], [1.69880904E12, 15.25], [1.6988082E12, 1506.1833333333334], [1.69881162E12, 1999.0666666666666], [1.69880598E12, 2000.0], [1.69880436E12, 167.36666666666667], [1.69881102E12, 1999.9666666666667], [1.698807E12, 2000.0], [1.69880862E12, 899.0166666666667], [1.6988112E12, 2000.0], [1.69880376E12, 334.03333333333336], [1.6988076E12, 1469.7666666666667], [1.69881144E12, 2000.0333333333333], [1.69880352E12, 333.1333333333333], [1.69880838E12, 1850.75], [1.69880736E12, 2000.0], [1.69880718E12, 1995.2333333333333], [1.69880394E12, 344.4166666666667], [1.69880616E12, 1994.4166666666667], [1.69880334E12, 200.81666666666666], [1.69880556E12, 1997.65], [1.69881096E12, 1082.8333333333333], [1.69880694E12, 704.65], [1.6988037E12, 333.45], [1.69880592E12, 1999.9666666666667], [1.69880754E12, 2000.0], [1.69880634E12, 2000.0], [1.69881156E12, 2000.0333333333333], [1.69880412E12, 333.26666666666665], [1.69880574E12, 1999.95], [1.69880856E12, 1795.8833333333334], [1.6988061E12, 1999.9666666666667], [1.69880388E12, 439.0833333333333], [1.6988055E12, 1620.55], [1.69880832E12, 1846.1666666666667], [1.6988118E12, 2000.0], [1.69880652E12, 1200.8833333333334], [1.69880328E12, 335.8333333333333], [1.69881138E12, 1997.85], [1.69880814E12, 26.666666666666668], [1.6988043E12, 334.9], [1.69880712E12, 2000.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69880646E12, 3.533333333333333], [1.69880868E12, 199.38333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.169880336E13, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

